******************************
******************************
  Chapter 6: Testing
******************************
******************************

    "In ordinary computational practice by hand or by desk machines, it is the custom to check every step of the computation and, when an error is found, to localize if by a backward process starting from the first point where the error is noted."
          Norbert Wiener, Cybernetics

    Testing != Debugging:
      Debugging := what you do when a program is broken
      Testing   := determined, systematic attempt to break a program you think is working.

  Edsger Dijkstra: testing can demonstrate presence of bugs, not their absence.

  Thinking about potential problems as you code is a good start.
  
  Systematic testing from easy to elaborate, help ensure programs begin life working correctly and remain that way as they grow.

  Automation helps eliminate manual processes and encourages extensive testing.

  Writing bug-free code -> generating the code by a program!
    If some prog task is so well understood that writing it seems mechanical, it should be mechanized, automated.

  A common case occurs when a program can be generated from a specification in some specialized language. For example, we compile high-level languages into assembly code; we use regular expressions to specify patterns of text; we use notations like SUM(A1:A50) to represent operations over a range of cells in a spreadsheet. In such cases, if the generator or translator is correct and if the specification is correct, the resulting program will be correct too.


*******************************
6.1 Test as You Write the Code
*******************************

  The earlier a problem is found the better. If you think systematically about what you are writing as you write it, you can verify simple properties of the program as it is being constructed, with the result that your code will have gone through one round of testing before it is even compiled. Certain kinds of bugs never come to life.

TEST CODE AT ITS BOUNDARIES

    One technique is boundary condition testing: as each small piece of code is written -- a loop or a conditional statement -- check right then that the condition branches the right way or that the loop goes through the proper number of times: non-existent or empty input, single input item, exactly full array, etc. Most code fail at boundaries.

    This fragment, modeled on fgets, reads chars until it finds a newline or fills a buffer:

?       int i;
?       char s[MAX];
?       
?       for (i = 0; (s[i] = getchar()) != '\n' && i < MAX-1; ++i)
?           ;
?       s[--i] = '\0';

Simulate this mentally as it reads a line. The first boundary test is the simplest: an empty line. i will stay zero and loop won't execute, but we will try to index s[-1] as a result. boundary condition testing finds the error

IF we rewrite the loop to use the conventional idiom for fillin an arary with input chars, it looks like this:

?       for (i = 0; i < MAX-1; i++)
?           if ((s[i] = getchar()) == '\n')
?               break;
?       s[i] = '\0';

    The original boundary test, just a \n in the input works fine: loop is broken and \n is replaced by a \0, a line of input has been saved to s.. or has it?? 

    There are other boundary conditions to check. If the input containes a long line or no newlines at all, tha tis protected by the i < MAX-1 check.

    But what if there is no input at all, so that the first call to getchar returns EOF? Let's write a check for that:

?       for (i = 0; i < MAX-1; i++)
?           if ((s[i] = getchar()) == '\n' || s[i] == EOF)
?               break;
?       s[i] = '\0';

    Boundary condition testing can catch a lot of bugs, but not all of them. There is a portability bug with the above example, see Chapter 8 for that.

    Next step, check at other boundary, where the arr is nearly full, exactly full, over-full, and particualrly if the \n arrives at the same time.

    What should be done if the buf fills up before '\n'? THis gap in the specification should be resolved early, and testin boundaries helps identify it.

    Boundary condition checking is effective for "off-by-one" errors. With practice, it becomes second nature, many trivial bugs are eliminated before they ever happen.


TEST PRE AND POST CONDITIONS

    Verify that expected or necessary properties hold before and after some piece of code executes. Making usre values are within range is a common example.

    The below example computes average of n elems. It has a problem if n is <= 0 :

?       double avg(double a[], int n)
?       {
?           int i;
?           double sum;
?           
?           sum = 0.0;
?           for (i = 0; i < n; i++)
?               sum += a[i];
?           return sum / n;
?       }

    What to do if n is zero? What about if negative? As suggested in Chapter 4, our prefernce is to return 0 if n <= 0, instead of aborting/complaining/div-by-zero-err etc..:
  
        return n <= 0 ? 0.0 : sum/n;

    THere is no single right answer, but the guaranteed wrong asnwer is to ignore the problem.

    USS Yorktown had a sailor enter 0 as data accidentally on an interface, and the resulting div-by-zero err ended up shutting down the ships propulsion system, left the ship dead at sea for hours, just because the program didn't check for valid input.


USE ASSERTIONS

    C and C++ provude assertion facilit in <assert.h> that encourages adding pre and post condition tests. Since failed assertions abort the program, these are reserved for situations where failure is really unexpected and there is no way to recover.

    We might augment the code above with an assertion before the loop:
        assert(n > 0);
    which will lead to a program abort if the assertion is violated:
        Assertion failed: n > 0, file avgtest.c, line 7
        Abort(crash)

    Assertions are particularly helpful for validating properties of interfaces because they draw attention to inconsistencies between caller and callee and may even indicate who's at fault. If the assertion that n is greater than 0 fails when the function is called, it points the finger at the caller rather than the avg itself as the source of trouble. If an interface changes but we forget to fix some routine that depends on it, an assertion may catch the mistake before it causes real trouble.

PROGRAM DEFENSIVELY

    A useful technique is to add code that handles "cant happen" cases. Adding a test for zero or negative array len to avg was one example. 

    Another example, a program that processes grades might expect that there would be no neg or huge values but should check anyway:
    
        if (grade < 0 || grade > 100)
            letter = '?';
        else if (grade >= 90)
            letter = 'A';
        else
            ...

    This is an example of defensivw programming: making sure that a program protects itself against incorrect use or illegal data. NUll otrs, out of range subscripts, divs by zero, and other errors can be detected early and warned about or deflected.


CHECK FOR ERROR RETURNS

    One overlooked defense: check the error returns from lib fns and syscalls.

    Checking the return code from output fns like fprintf or fwrite will catch the error that results from trying to write a file when there is no space elft on disk. it may be sufficient to check the return value from fclose, which returns EOF if any error occurred during any operation, 0 oterhwise:

        fp = fopen(outfile, "w");
        while (...)
            fprintf(fp, ...);
        if (fclose(fp) == EOF)
            // some output err occurred

    Output errors can be serious. If the file being written to is the new version of a precious file, this check will save you from removeing th eold file if the new one was not written successfully.

    The effort of testign as you go is minimal and pays of handsomely. Thinking about testing as you write a program will elad to better code, because that is when you know best what the code should do. IF instead you wait until something breaks, you will probably have forgotten hpw the code works. Working under pressure you will need to figure out again, which takes time, and the fixes will be les thorough and more fragile because your refreshed understanding is likely to be incomplete.

  Ex 6-1 Check out these examples at their boundaries, then fix them as necessary according to the principles of style in CHapter 1 and the advice in this chapter.
    a) this is supposed to compute factorials:
        int factorial(int n)
        {
            int fac;
            fac = 1;
            while (n--)
                fac *= n;
            return fac;
        }

    b) This is supoposed to print the chars of a string on per line:
        i = 0;
        do {
            putchar(s[1++]);
            putchar('\n');
        } while (s[i] != '\0');

    c) This is meant to copy a str from src to dest
        void strcpy(char *dest, char *src)
        {
            int i;

            for (i = 0; src[i] != '\0'; i++)
                dest[i] = src[i];
        }

    d) Another str copy, which attempts to copy n chars from s to t:

        void strncpy(caht *t, char *s, int n)
        {
            while (n > 0 && *s != '\0') {
                *t = *s;
                t++;
                s++;
                n--;
            }
        }

    e) A numerical comparison:
        if (i > j)
            printf("%d is greater than %d.\n", i, j);
        else
            printf("%d is smaller than %d.\n", i, j);

    f) A char class test:
        if (c >= 'A' && c <= 'Z') {
            if (c <= 'L')
                cout << "first half of alphabet";
            else
                cout << "second half of alphabet";
        }


  Ex 6-2 As we are writing this book in late 1998, the Year 2000 problem looms as perhaps the biggest boundary condition problem ever.

    (a) What dates would you use to check whether a system is likely to work in the year 2000? Supposing that test are expensive to perform, in what order would you do your tests after trying January 1, 2000 itself?

    (b) How would you test the std fn ctime, which returns a string representation of the date in this form:
        Fri Dec 31 23:58:27 EST 1999\n\0
    Suppose yuor program calls ctime. How would you write yuor code to defend against flawed implementation?

    (c) Describe how you would test a calendar program that prints output like this:
        January 2000
      S  M Tu  W Th  F  S
                        1
      2  3  4  5  6  7  8
      9 10 11 12 13 14 15
     16 17 18 19 20 21 22
     23 24 25 26 27 28 29
     30 31

    (d) What other time boundaries can you think of in systems that you use, and how would you test to see whether they are handled correctly?


*****************************
6.2 Systematic Testing
*****************************

    It is important to test a program systematically, so you know at each step what you are testing and what results you expect. You need to be orderly so you don't overlook anything, and you must keep records so you know how much you have done.

TEST INCREMENTALLY
  
    Testing should go hand in hand with program construction. 

    Writing the whole program and testing it at once afterwards is time consuming.

    Write a part of it, test it, repeat.

    Then test integration of parts.

    Ex: when testing the CSV program in Chapter 4:
        1st we wrote enough code to read input, tested it
        2nd we wrote splitting logic, tested it
        3rd fields with quotes, tested it
        ...
        finally integrated and tested integration

TEST SIMPLE PARTS FIRST

    Incremental approach applies also to how you test.

    Test simplest and most commonly executed features, only then move on.

    At each stage you expose more to testing and build confidence on basic mechanisms.

    easy tests find easy bugs, each test does the minimum to ferret out the next potential problem.

    Although each bug is harder to trigger than its predecessor, it is not necessarily harder to fix.

    Ways to choose effective tests and the order to apply them.

    Systematic testing of small cases:

    Suppose a b_search fn on an arr of ints,
      we should begin with these tests, in order of increasing complexity:
        •search an arr with no elems
        •search arr with one element and a tral value that is:
            -less than the single elem in arr
            -equal to single elem in arr
            -greater than single elem in arr
        •search arr with two elems and trial values that
            - check all five possible positions
                ▪ elem1 < elem2 < trial
                ▪ elem1 < elem2 = trial
                ▪ elem1 < trial < elem2
                ▪ elem1 = trial < elem2
                ▪ trial < elem1 < elem2
        •check behavior with duplicates in arr and trial vals that
            - less than val in arr
            - equal to val in arr
            - greater than val
        •search arr with three elems as with two elems
        •search arr with four elems as with 2 and 3

    This set of tests is small enough to perform by hand, but it is better to create a test scaffold to automate the process. The following driver program reads input lines that contain a key to search and for an array size, creates an array of that size containing values 1,3,5 etc, and searches the array for the key:
        /* bintest main: scaffold for testing binsearch */ 
        int main(void)
        {
            int i, key, nelem, arr[1000];
            while (scanf("%d%d", &key, &nelem) != EOF) { 
                for (i = 0; i < nelem; i++)
                    arr[i] = 2*i + 1;
                printf("%d\n", binsearch(key, arr, nelem));
            }
            return 0; 
        }
    This is simpleminded but it shows that scaffold need not be big.

KNOW WHAT OUTPUT TO EXPECT

    If you don't know what the right answer of a test is, you're wasting your time.

    This might seem obvious. either cp copies a file or not, either wc counts words correectly or not etc.

    Most programs, however, are more difficult to characterize:
      compilers (does the output properly translate the input)
      numerical algs (is the asnwer within error tolerance)
      graphics (are the pixels in the right places)
      and so on.

      For these it is especially important to validate output by comparing to known values.
    
      • To test a compiler, compile and run test files. The test programs should in turn generate output, and their results should be compared to known ones.

      • To test a numerical progarm, generate test cases that explore the edges of the alg, trivial cases and hard ones. Where possible, write code that verifies that output properties are sane. For example, the output of a numerical integrator can be tested for continuity, and for agreement with closed form solutions.

      • To test a graphics program, it is not enough to see if it can draw a box; instead read the box back from the screen and check that its edges are exactly where they should be.

    If the program has an inverse, check if its application recovers the input. Encryption and decryption are inverses for example, if you encrypt and then cannot decrypt, something must be wrong. zip/unzip and so on.
    Sometimes there are mutiple methods for inversion: check all combinations.

VERIFY CONSERVATION PROPERTIES

    Many programs preserve some property of their inputs. Tools like wc and sum can verify that outpus are of the same size, same number of words, contain same bytes in some order, etc
    Other programs compare files for identity (cmp) and report differences (diff)

    A byte freq program can be used to check for conservation of data and also to spot anomalies like non-text chars in supposedly text only files: here is a version we call freq:

        #include <stdio.h>
        #include <ctype.h>
        #include <limits.h>

        unsigned long count[UCHAR_MAX+1];
        // freq main: display byte freq counts
        int main(void)
        {
            int c;
  
            while((c = getchar()) != EOF)
                count[c++];
            for (c = 0; c < UCHAR_MAX; c++)
                if (count[c] != 0)
                    printf("%.2x %c %lu\n",
                        c, isprint(c) ? c : '-', count[c]);
            return 0;
        }
        
    
    Conservation properties can be verified within a program as well. An fn that counts the elements ina  data structure provides a trivial consistency check. A hash table should ahve the property that every element inserted into it can be retrieved. This conditon is easy to check with a function that dumps the contents of the table into a file or an array. At any time the number of insertions into a data structure minus the number of deletions must be equal to the number of elements contained, a condition that is easy to verify.


COMPARE INDEPENDENT IMPLEMENTATIONS

    Independent implementations of a library or program should produce the same answers. For example, two compilers should produce programs that behave the same way on the same machine, at least in most situations.

    Sometimes an answer can be computed in two different ways, or you might be able to write a trivial version of a program to use as a slow but independent comparison. If two unrelated programs get the same answers, there is a good chance that they are correct; if they get different answers, at least one is wrong.

    One of the authors once worked with another person ona  compiler for a new machine. The work of debugging the code generated by the compiler was split: one person wrote the software that encoded instructions for the target machine, and the other wrote the disassembler for the debugger. This meant that any error interpretation or implementation of the instruction set was unlikely to be duplicated between the two components. When the compiler miscoded an instruction, the disassembler was sure to notice. All the early output of the compiler was run through the disassembler and verified against the compilers own debugging printouts. This strategy worked very well in practice, instantly catching mistakes in both pueces. The only difficult, protracted debugging occurred when both people interpreted and ambiguous phrase in the architecture description in the same incorrect way.

MEASURE TEST COVERAGE

    One goal of testing is to make sure that evey statement of a program has been executed sometimes during the sequence of tests; testing cannot be considered complete unless every line of the program has been exercised by at least one test. Compelte coverage is othen quite difficult to achieve. Even leaving aside the "cant happen" cases, it is hard to use normal inputs to force a program to go through particular statements.

    There are commercial tools for measuring coverage. Profilers, often included as part of compiler suites, provide a way to compute a statement frequency count for each program statement that indicates the covereage achieved by specific tests.

    The Markov program was tested with a combination of these techniques, the last section describrs those tests in detail.

  Ex 6-3 Describe how you would test freq.

  Ex 6-4 Design and implement a version of freq that measures the frequenccies of other types of data values, such as 32 bit integers or floating point numbers. Can you make one version of the program to handle a variety of types elegantly?     


*****************************
6.3 Test Automation
*****************************

